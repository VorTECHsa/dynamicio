name: Build and Publish

on:
  push:
    branches: ["*"]
    tags: ["v*"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:

jobs:
  style-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction

      - name: Run style checks
        run: |
          poetry run black --check dynamicio tests
          poetry run flake8 --verbose dynamicio tests
          poetry run pylint -v dynamicio tests
          poetry run yamllint -v dynamicio tests

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction

      - name: Run tests
        run: |
          mkdir -p test-results
          poetry run pytest -vv --junitxml=test-results/junit.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: test-results

  build-and-publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: ["style-checks", "test"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Important: fetch full history so dunamai works

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install poetry-dynamic-versioning plugin
        run: poetry self add poetry-dynamic-versioning

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction

      - name: Build and Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry publish --no-interaction --build --username __token__ --password "$POETRY_PYPI_TOKEN_PYPI"

